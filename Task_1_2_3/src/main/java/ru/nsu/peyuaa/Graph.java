/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package ru.nsu.peyuaa;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class Graph<T> {
    private static class Vertex<T> {
        T value;
        List<Edge<T>> edges;

        public Vertex(T value) {
            this.value = value;
        }
    }

    private static class Edge<T> {
        int weight;
        Vertex<T> from;
        Vertex<T> to;

        public Edge(int weight, Vertex<T> from, Vertex<T> to) {
            this.weight = weight;
            this.from = from;
            this.to = to;
        }
    }

    private List<Vertex<T>> vertices;
    private List<Edge<T>> edges;

    public Graph() {
        vertices = new LinkedList<>();
        edges = new LinkedList<>();
    }

    public void addVertex(T value) {
        vertices.add(new Vertex<>(value));
    }

    public void deleteVertex(T value) {
        for (Iterator<Vertex<T>> iterator = vertices.listIterator(); iterator.hasNext();) {
            Vertex<T> vertex = iterator.next();
            if (vertex.value.equals(value)) {
                for (Edge<T> edge : vertex.edges) {
                    deleteEdge(edge);
                }
                iterator.remove();
            }
        }
    }

    public void addEdge(int weight, Vertex<T> from, Vertex<T> to) {
        Edge<T> edge = new Edge<>(weight, from, to);
        edges.add(edge);
        from.edges.add(edge);
        to.edges.add(edge);
    }

    public void deleteEdge(Edge<T> edge) {
        edge.from.edges.remove(edge);
        edge.to.edges.remove(edge);
        edges.remove(edge);
    }
}
