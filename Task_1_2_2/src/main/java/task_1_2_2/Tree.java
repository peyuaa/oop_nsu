/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package task_1_2_2;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class Tree<T> implements Iterable<Tree.Node>{
    @Override
    public Iterator<Tree.Node> iterator() {
        return new BreadthFirstSearchIterator();
    }

    class BreadthFirstSearchIterator implements Iterator<Tree.Node> {
        LinkedList<Node> queue = new LinkedList<>();

        @Override
        public boolean hasNext() {
            if (queue.size() == 0) {
                return false;
            }
            return true;
        }

        @Override
        public Node next() {
            return queue.poll();
        }

        @Override
        public void remove() {
            Iterator.super.remove();
        }
    }

    class Node<T> {
        T value;
        Node<T> parent;
        List<Node<T>> children;

        public Node(T value) {
            this.value = value;
            this.children = new LinkedList<>();
        }

        private void addChild(Node child) {
            child.parent = this;
            children.add(child);
        }
    }

    Node root;

    private Node breadthFirstSearch(T value) {
        Iterator<Tree.Node> bfsIterator = new BreadthFirstSearchIterator();

        while (bfsIterator.hasNext()) {
            Node currentNode = bfsIterator.next();
            if (currentNode.value.equals(value)) {
                return currentNode;
            }
        }

        return null;
    }

    public void add(String value) {
        if (root.value == null) {
            root.value = value;
        } else {
            root.addChild(new Node(value));
        }
    }

    public void add(Node parent, String value) {
        parent.addChild(new Node<>(value));
    }
}
