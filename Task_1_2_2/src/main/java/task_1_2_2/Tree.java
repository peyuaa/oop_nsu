/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package task_1_2_2;

import java.util.*;

public class Tree<T> implements Iterable<Tree.Node<T>>{
    static class Node<T> {
        T value;
        Node<T> parent;
        List<Node<T>> children;

        public Node(T value) {
            this.value = value;
            this.children = new LinkedList<>();
        }

        private void addChild(Node<T> child) {
            child.parent = this;
            children.add(child);
        }
    }
    @Override
    public Iterator<Node<T>> iterator() {
        return new BreadthFirstSearchIterator();
    }

    class BreadthFirstSearchIterator implements Iterator<Node<T>> {
        LinkedList<Node<T>> queue = new LinkedList<>();
        boolean isRootAdded = false;

        @Override
        public boolean hasNext() {
            if (!isRootAdded) {
                queue.add(root);
                isRootAdded = true;
            }

            if (queue.size() == 0) {
                return false;
            }
            return true;
        }

        @Override
        public Node<T> next() {
            Node<T> currentNode = queue.poll();
            currentNode.children.forEach(
                    child -> queue.add(child)
            );
            return currentNode;
        }
    }

    class DepthFirstSearchIterator implements Iterator<Node<T>> {
        Stack<Node<T>> stack = new Stack<>();
        boolean isRootAdded = false;

        @Override
        public boolean hasNext() {
            if (!isRootAdded) {
                stack.push(root);
                isRootAdded = true;
            }
            return !stack.isEmpty();
        }

        @Override
        public Node<T> next() {
            Node<T> currentNode = stack.pop();
            currentNode.children.forEach(
                    child -> stack.push(child)
            );
            return currentNode;
        }
    }

    private Node<T> root;

    private Node<T> breadthFirstSearch(T value) {
        Iterator<Node<T>> bfsIterator = new BreadthFirstSearchIterator();

        while (bfsIterator.hasNext()) {
            Node currentNode = bfsIterator.next();
            if (currentNode.value.equals(value)) {
                return currentNode;
            }
        }

        return null;
    }

    public void add(T value) {
        if (root == null) {
            root = new Node<>(value);
        } else {
            root.addChild(new Node<>(value));
        }
    }

    public void add(Node<T> parent, T value) {
        parent.addChild(new Node<>(value));
    }

    public List<T> breadthFirstTraversal() {
        List<T> traverseResult = new ArrayList<>();

        Iterator<Node<T>> bfsIterator = new BreadthFirstSearchIterator();
        while (bfsIterator.hasNext()) {
            Node<T> currentNode = bfsIterator.next();
            traverseResult.add(currentNode.value);
        }

        return traverseResult;
    }
}
