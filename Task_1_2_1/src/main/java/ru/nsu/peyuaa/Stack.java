/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package ru.nsu.peyuaa;

import java.util.Arrays;
import java.util.Objects;

/**
 * Stack implementation.
 *
 * @param <T> type of the parameter
 */
public class Stack<T> {
    /**
     * Capacity of the stack.
     */
    private int capacity;
    /**
     * Number of elements in the stack.
     */
    private int length;
    /**
     * Array containing elements of stack.
     */
    private T[] elements;

    /**
     * Stack constructor.
     *
     * @param capacity capacity of stack
     */
    public Stack(int capacity) {
        elements = (T[]) new Object[capacity];
        this.capacity = capacity;
        this.length = 0;
    }

    /**
     * Stack constructor, initializes Stack with elements from array.
     *
     * @param array is an array with elements in stack
     */
    private Stack(T[] array) {
        this.elements = array;
        this.length = array.length;
        this.capacity = array.length;
    }

    /**
     * Return number of elements in stack.
     *
     * @return number of elements in the stack
     */
    public int count() {
        return length;
    }

    /**
     * Push element into stack.
     *
     * @param element is element to push
     */
    public void push(T element) {
        if (length >= capacity) {
            grow();
        }
        elements[length] = element;
        length += 1;
    }

    /**
     * Push elements of stack given in parameters into current stack.
     *
     * @param stack containt elements to push into our stack
     */
    public void pushStack(Stack<T> stack) {
        for (int i = 0; i < stack.length; i++) {
            push(stack.elements[i]);
        }
    }

    /**
     * Pop element from stack.
     *
     * @return element of stack
     */
    public T pop() {
        T element = elements[length - 1];
        length -= 1;
        return element;
    }

    /**
     * Pop length elements from stack in Stack object.
     *
     * @param length number of elements to pop.
     * @return stack object with popped elements
     */
    public Stack<T> popStack(int length) {
        T[] poppedElements = Arrays.copyOfRange(elements, this.length - length, this.length);

        for (int i = 0; i < length; i++) {
            pop();
        }

        return new Stack<>(poppedElements);
    }

    /**
     * Grow underlying array.
     */
    private void grow() {
        int newCapacity = capacity * 2;
        T[] newElements = (T[]) new Object[newCapacity];

        for (int i = 0; i < length; i++) {
            newElements[i] = elements[i];
        }

        elements = newElements;
        capacity = newCapacity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Stack<?> stack = (Stack<?>) o;
        return length == stack.length && Arrays.equals(elements, 0, length, stack.elements, 0, stack.length);
    }

    @Override
    public int hashCode() {
        int result = Objects.hash(capacity, length);
        result = 31 * result + Arrays.hashCode(elements);
        return result;
    }
}
