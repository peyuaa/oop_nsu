/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package ru.nsu.peyuaa;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class CalculatorTest {
    @Test
    void plus() throws IOException {
        try (ByteArrayInputStream in = new ByteArrayInputStream("+ -7 5\n".getBytes())) {
            String expected = "-2.0\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void multiplication() throws IOException {
        try (ByteArrayInputStream in = new ByteArrayInputStream("* 17 9\n".getBytes())) {
            String expected = "153.0\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void division() throws IOException {
        try (ByteArrayInputStream in = new ByteArrayInputStream("/ 13 4\n".getBytes())) {
            String expected = "3.25\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void minus() throws IOException {
        try (ByteArrayInputStream in = new ByteArrayInputStream("- -91 9\n".getBytes())) {
            String expected = "-100.0\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void pow() throws IOException {
        try (ByteArrayInputStream in = new ByteArrayInputStream("pow 2 5\n".getBytes())) {
            String expected = "32.0\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void log() throws IOException {
        try (ByteArrayInputStream in = new ByteArrayInputStream("log 17\n".getBytes())) {
            String expected = "2.833213344056216\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void sqrt() throws IOException {
        try (ByteArrayInputStream in = new ByteArrayInputStream("sqrt 16\n".getBytes())) {
            String expected = "4.0\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void sin() throws IOException {
        try (ByteArrayInputStream in = new ByteArrayInputStream("sin 0\n".getBytes())) {
            String expected = "0.0\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void cos() throws IOException {
        try (ByteArrayInputStream in = new ByteArrayInputStream("cos 0\n".getBytes())) {
            String expected = "1.0\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void hardExpression1() throws IOException {
        try (ByteArrayInputStream in = new ByteArrayInputStream("sin + - 1 2 1\n".getBytes())) {
            String expected = "0.0\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void hardExpression2() throws IOException {
        try (ByteArrayInputStream in = new ByteArrayInputStream("+ 6 * -1 5\n".getBytes())) {
            String expected = "1.0\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void hardExpression3() throws IOException {
        try (ByteArrayInputStream in = new ByteArrayInputStream("* + 3 4 2\n".getBytes())) {
            String expected = "14.0\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void hardExpression4() throws IOException {
        try(ByteArrayInputStream in =
                new ByteArrayInputStream("+ + sin 1.57079633 * sqrt 64 cos 0 pow 2 2\n".getBytes())) {
            String expected = "13.0\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }

    @Test
    void hardExpression5() throws IOException {
        try (ByteArrayInputStream in =
                new ByteArrayInputStream(("* + + sin 1.57079633 * sqrt 64 cos 0 pow 2 2 + + +"
                        + " sin 1.57079633 * sqrt 64 cos 0 pow 2 2 sin"
                        + " - pow 2 5 sqrt pow 32 2\n").getBytes())) {
            String expected = "169.0\n";

            ByteArrayOutputStream actual = new ByteArrayOutputStream();
            final String utf8 = StandardCharsets.UTF_8.name();
            PrintStream ps = new PrintStream(actual, true, utf8);

            Calculator calculator = new Calculator(in, ps);
            calculator.startCalculator();

            Assertions.assertEquals(expected, actual.toString(utf8));
        }
    }
}
