/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package ru.nsu.peyuaa;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.Stack;

/**
 * Calculate the expression if prefix form.
 */
public class Calculator {
    private final InputStream in;
    private final PrintStream out;

    private boolean isUnaryOperation(String operand) {
        return operand.equals("log") || operand.equals("sqrt")
                || operand.equals("sin") || operand.equals("cos");
    }

    private double doUnaryOperation(String operand, String argument) {
        double arg = Double.parseDouble(argument);
        return switch (operand) {
            case "log" -> Math.log(arg);
            case "sqrt" -> Math.sqrt(arg);
            case "sin" -> Math.sin(arg);
            case "cos" -> Math.cos(arg);
            default -> throw new RuntimeException("Unsupported operation");
        };
    }

    private boolean isBinaryOperation(String operand) {
        return operand.equals("+") || operand.equals("-") || operand.equals("*")
                || operand.equals("/") || operand.equals("pow");
    }

    private double doBinaryOperation(String operand, String firstArgument, String secondArgument) {
        double firstArg = Double.parseDouble(firstArgument);
        double secondArg = Double.parseDouble(secondArgument);
        return switch (operand) {
            case "+" -> firstArg + secondArg;
            case "-" -> firstArg - secondArg;
            case "*" -> firstArg * secondArg;
            case "/" -> firstArg / secondArg;
            case "pow" -> Math.pow(firstArg, secondArg);
            default -> throw new RuntimeException("Unsupported operation");
        };
    }

    private void calculateExpression(String[] args) {
        Stack<String> stack = new Stack<>();
        Stack<String> helperStack = new Stack<>();

        Arrays.stream(args).forEachOrdered(stack::push);

        while (!stack.isEmpty()) {
            String arg = stack.pop();
            if (isBinaryOperation(arg)) {
                if (helperStack.size() < 2) {
                    throw new RuntimeException("Incorrect expression");
                }
                stack.push(Double.toString(doBinaryOperation(arg,
                        helperStack.pop(), helperStack.pop())));

            } else if (isUnaryOperation(arg)) {
                if (helperStack.size() < 1) {
                    throw new RuntimeException("Incorrect expression");
                }
                stack.push(Double.toString(doUnaryOperation(arg, helperStack.pop())));
            } else {
                helperStack.push(arg);
            }
        }

        out.println(helperStack.pop());
    }

    /**
     * Starts calculator.
     *
     * @throws IOException input/output exception
     */
    public void startCalculator() throws IOException {
        try (var reader = new BufferedReader(new InputStreamReader(in))) {
            String expression = reader.readLine();
            calculateExpression(expression.split(" "));
        }
    }

    /**
     * Calculator constructor.
     *
     * @param in input stream.
     * @param out output stream.
     */
    public Calculator(InputStream in, PrintStream out) {
        this.in = in;
        this.out = out;
    }
}
